version: '3.9'
services:
  django:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./.env.prod
    environment:
      - ENV_FILE=.env.prod
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
    depends_on:
      - db
      - redis
    command: >
      sh -c "python manage.py migrate && \
             python manage.py collectstatic --noinput && \
             gunicorn blog.wsgi:application --bind 0.0.0.0:8000"
    restart: unless-stopped

  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env.prod
    environment:
      - ENV_FILE=.env.prod
    restart: unless-stopped

  redis:
    image: redis:6-alpine
    restart: unless-stopped

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A blog worker -l INFO
    env_file:
      - ./.env.prod
    environment:
      - ENV_FILE=.env.prod
    depends_on:
      - django
      - redis
    restart: unless-stopped

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A blog beat -l INFO
    env_file:
      - ./.env.prod
    environment:
      - ENV_FILE=.env.prod
    depends_on:
      - celery
      - redis
      - django
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - ./.env.prod
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_INTERNAL_API_URL=http://django:8000/api/v1
      - ENV_FILE=.env.prod
    depends_on:
      - django
    command: sh -c "npm run build && npm start"
    ports:
      - "3000:3000"
    restart: unless-stopped

volumes:
  postgres_data:
  static_volume:
  media_volume:
